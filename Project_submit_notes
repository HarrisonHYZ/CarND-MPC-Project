1. The description about the model.
The vehicle model I used is a Kinematic Model. The state includes the x posiiton px, y position py, the orientation psi,
the velocity v, the cross track error cte and the error between the current psi and the desired psi epsi. Also, we have the
steering angle delta and the acceleration a. According to the model, the update equations about the state with the actuators
are:
x_[t+1] = x[t] + v[t] * cos(psi[t]) * dt
y_[t+1] = y[t] + v[t] * sin(psi[t]) * dt
psi_[t+1] = psi[t] + v[t] / Lf * delta[t] * dt
v_[t+1] = v[t] + a[t] * dt
cte[t+1] = f(x[t]) - y[t] + v[t] * sin(epsi[t]) * dt
epsi[t+1] = psi[t] - psides[t] + v[t] * delta[t] / Lf * dt

2. Timestep Length and Elapsed Duration (N & dt)
If the timestep length is too long, it will make the simulator too slow to get the right solution.
If the dt is too big, the car may be out of the road before we control it. I tried some
groups of values like (50,1), (50, 0.1) or (10,1). They all didn't work because of the reasons I
explained at the beginning.

3. Deal with latency.
After the simulator send me the current state, I will use the current state and actuators to compute a new state after a period
of the latency. Then I use the new state as the initial state for my mpc. The result is acceptable.
